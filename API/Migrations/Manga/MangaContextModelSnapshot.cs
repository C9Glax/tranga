// <auto-generated />
using API.Schema.MangaContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API.Migrations.Manga
{
    [DbContext(typeof(MangaContext))]
    partial class MangaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("API.Schema.MangaContext.Author", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Key");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("API.Schema.MangaContext.Chapter", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("ChapterNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<bool>("Downloaded")
                        .HasColumnType("boolean");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ParentMangaId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Title")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int?>("VolumeNumber")
                        .HasColumnType("integer");

                    b.HasKey("Key");

                    b.HasIndex("ParentMangaId");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("API.Schema.MangaContext.FileLibrary", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("BasePath")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("LibraryName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("Key");

                    b.ToTable("FileLibraries");
                });

            modelBuilder.Entity("API.Schema.MangaContext.Manga", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("CoverFileNameInCache")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("CoverUrl")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DirectoryName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<float>("IgnoreChaptersBefore")
                        .HasColumnType("real");

                    b.Property<string>("LibraryId")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("OriginalLanguage")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<byte>("ReleaseStatus")
                        .HasColumnType("smallint");

                    b.Property<long?>("Year")
                        .HasColumnType("bigint");

                    b.HasKey("Key");

                    b.HasIndex("LibraryId");

                    b.ToTable("Mangas");
                });

            modelBuilder.Entity("API.Schema.MangaContext.MangaConnectorId<API.Schema.MangaContext.Chapter>", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("IdOnConnectorSite")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("MangaConnectorName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("ObjId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("UseForDownload")
                        .HasColumnType("boolean");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("Key");

                    b.HasIndex("MangaConnectorName");

                    b.HasIndex("ObjId");

                    b.ToTable("MangaConnectorToChapter");
                });

            modelBuilder.Entity("API.Schema.MangaContext.MangaConnectorId<API.Schema.MangaContext.Manga>", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("IdOnConnectorSite")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("MangaConnectorName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("ObjId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("UseForDownload")
                        .HasColumnType("boolean");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("Key");

                    b.HasIndex("MangaConnectorName");

                    b.HasIndex("ObjId");

                    b.ToTable("MangaConnectorToManga");
                });

            modelBuilder.Entity("API.Schema.MangaContext.MangaConnectors.MangaConnector", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.PrimitiveCollection<string[]>("BaseUris")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("text[]");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.PrimitiveCollection<string[]>("SupportedLanguages")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("text[]");

                    b.HasKey("Name");

                    b.ToTable("MangaConnectors");

                    b.HasDiscriminator<string>("Name").HasValue("MangaConnector");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("API.Schema.MangaContext.MangaTag", b =>
                {
                    b.Property<string>("Tag")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Tag");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("API.Schema.MangaContext.MetadataFetchers.MetadataEntry", b =>
                {
                    b.Property<string>("MetadataFetcherName")
                        .HasColumnType("text");

                    b.Property<string>("Identifier")
                        .HasColumnType("text");

                    b.Property<string>("MangaId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MetadataFetcherName", "Identifier");

                    b.HasIndex("MangaId");

                    b.ToTable("MetadataEntries");
                });

            modelBuilder.Entity("API.Schema.MangaContext.MetadataFetchers.MetadataFetcher", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("MetadataEntry")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.HasKey("Name");

                    b.ToTable("MetadataFetcher");

                    b.HasDiscriminator<string>("MetadataEntry").HasValue("MetadataFetcher");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AuthorToManga", b =>
                {
                    b.Property<string>("AuthorIds")
                        .HasColumnType("text");

                    b.Property<string>("MangaIds")
                        .HasColumnType("text");

                    b.HasKey("AuthorIds", "MangaIds");

                    b.HasIndex("MangaIds");

                    b.ToTable("AuthorToManga");
                });

            modelBuilder.Entity("MangaTagToManga", b =>
                {
                    b.Property<string>("MangaTagIds")
                        .HasColumnType("character varying(64)");

                    b.Property<string>("MangaIds")
                        .HasColumnType("text");

                    b.HasKey("MangaTagIds", "MangaIds");

                    b.HasIndex("MangaIds");

                    b.ToTable("MangaTagToManga");
                });

            modelBuilder.Entity("API.Schema.MangaContext.MangaConnectors.ComickIo", b =>
                {
                    b.HasBaseType("API.Schema.MangaContext.MangaConnectors.MangaConnector");

                    b.HasDiscriminator().HasValue("ComickIo");
                });

            modelBuilder.Entity("API.Schema.MangaContext.MangaConnectors.Global", b =>
                {
                    b.HasBaseType("API.Schema.MangaContext.MangaConnectors.MangaConnector");

                    b.HasDiscriminator().HasValue("Global");
                });

            modelBuilder.Entity("API.Schema.MangaContext.MangaConnectors.MangaDex", b =>
                {
                    b.HasBaseType("API.Schema.MangaContext.MangaConnectors.MangaConnector");

                    b.HasDiscriminator().HasValue("MangaDex");
                });

            modelBuilder.Entity("API.Schema.MangaContext.MetadataFetchers.MyAnimeList", b =>
                {
                    b.HasBaseType("API.Schema.MangaContext.MetadataFetchers.MetadataFetcher");

                    b.HasDiscriminator().HasValue("MyAnimeList");
                });

            modelBuilder.Entity("API.Schema.MangaContext.Chapter", b =>
                {
                    b.HasOne("API.Schema.MangaContext.Manga", "ParentManga")
                        .WithMany("Chapters")
                        .HasForeignKey("ParentMangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentManga");
                });

            modelBuilder.Entity("API.Schema.MangaContext.Manga", b =>
                {
                    b.HasOne("API.Schema.MangaContext.FileLibrary", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsMany("API.Schema.MangaContext.AltTitle", "AltTitles", b1 =>
                        {
                            b1.Property<string>("Key")
                                .HasColumnType("text");

                            b1.Property<string>("Language")
                                .IsRequired()
                                .HasMaxLength(8)
                                .HasColumnType("character varying(8)");

                            b1.Property<string>("MangaKey")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)");

                            b1.HasKey("Key");

                            b1.HasIndex("MangaKey");

                            b1.ToTable("AltTitle");

                            b1.WithOwner()
                                .HasForeignKey("MangaKey");
                        });

                    b.OwnsMany("API.Schema.MangaContext.Link", "Links", b1 =>
                        {
                            b1.Property<string>("Key")
                                .HasColumnType("text");

                            b1.Property<string>("LinkProvider")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("character varying(64)");

                            b1.Property<string>("LinkUrl")
                                .IsRequired()
                                .HasMaxLength(2048)
                                .HasColumnType("character varying(2048)");

                            b1.Property<string>("MangaKey")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("Key");

                            b1.HasIndex("MangaKey");

                            b1.ToTable("Link");

                            b1.WithOwner()
                                .HasForeignKey("MangaKey");
                        });

                    b.Navigation("AltTitles");

                    b.Navigation("Library");

                    b.Navigation("Links");
                });

            modelBuilder.Entity("API.Schema.MangaContext.MangaConnectorId<API.Schema.MangaContext.Chapter>", b =>
                {
                    b.HasOne("API.Schema.MangaContext.MangaConnectors.MangaConnector", "MangaConnector")
                        .WithMany()
                        .HasForeignKey("MangaConnectorName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Schema.MangaContext.Chapter", "Obj")
                        .WithMany("MangaConnectorIds")
                        .HasForeignKey("ObjId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MangaConnector");

                    b.Navigation("Obj");
                });

            modelBuilder.Entity("API.Schema.MangaContext.MangaConnectorId<API.Schema.MangaContext.Manga>", b =>
                {
                    b.HasOne("API.Schema.MangaContext.MangaConnectors.MangaConnector", "MangaConnector")
                        .WithMany()
                        .HasForeignKey("MangaConnectorName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Schema.MangaContext.Manga", "Obj")
                        .WithMany("MangaConnectorIds")
                        .HasForeignKey("ObjId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MangaConnector");

                    b.Navigation("Obj");
                });

            modelBuilder.Entity("API.Schema.MangaContext.MetadataFetchers.MetadataEntry", b =>
                {
                    b.HasOne("API.Schema.MangaContext.Manga", "Manga")
                        .WithMany()
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Schema.MangaContext.MetadataFetchers.MetadataFetcher", "MetadataFetcher")
                        .WithMany()
                        .HasForeignKey("MetadataFetcherName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");

                    b.Navigation("MetadataFetcher");
                });

            modelBuilder.Entity("AuthorToManga", b =>
                {
                    b.HasOne("API.Schema.MangaContext.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorIds")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Schema.MangaContext.Manga", null)
                        .WithMany()
                        .HasForeignKey("MangaIds")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MangaTagToManga", b =>
                {
                    b.HasOne("API.Schema.MangaContext.Manga", null)
                        .WithMany()
                        .HasForeignKey("MangaIds")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Schema.MangaContext.MangaTag", null)
                        .WithMany()
                        .HasForeignKey("MangaTagIds")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Schema.MangaContext.Chapter", b =>
                {
                    b.Navigation("MangaConnectorIds");
                });

            modelBuilder.Entity("API.Schema.MangaContext.Manga", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("MangaConnectorIds");
                });
#pragma warning restore 612, 618
        }
    }
}
