// <auto-generated />
using System;
using API.Schema.ActionsContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API.Migrations.Actions
{
    [DbContext(typeof(ActionsContext))]
    partial class ActionsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("API.Schema.ActionsContext.ActionRecord", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("Action")
                        .HasMaxLength(128)
                        .HasColumnType("integer");

                    b.Property<DateTime>("PerformedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Key");

                    b.ToTable("Actions");

                    b.HasDiscriminator<int>("Action");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("API.Schema.ActionsContext.Actions.ChapterDownloadedActionRecord", b =>
                {
                    b.HasBaseType("API.Schema.ActionsContext.ActionRecord");

                    b.Property<string>("ChapterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ChapterId");

                    b.Property<string>("MangaId")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("MangaId");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("API.Schema.ActionsContext.Actions.ChaptersRetrievedActionRecord", b =>
                {
                    b.HasBaseType("API.Schema.ActionsContext.ActionRecord");

                    b.Property<string>("MangaId")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("MangaId");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("API.Schema.ActionsContext.Actions.CoverDownloadedActionRecord", b =>
                {
                    b.HasBaseType("API.Schema.ActionsContext.ActionRecord");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("MangaId")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("MangaId");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("API.Schema.ActionsContext.Actions.DataMovedActionRecord", b =>
                {
                    b.HasBaseType("API.Schema.ActionsContext.ActionRecord");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("API.Schema.ActionsContext.Actions.LibraryMovedActionRecord", b =>
                {
                    b.HasBaseType("API.Schema.ActionsContext.ActionRecord");

                    b.Property<string>("FileLibraryId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("MangaId")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("MangaId");

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("API.Schema.ActionsContext.Actions.MetadataUpdatedActionRecord", b =>
                {
                    b.HasBaseType("API.Schema.ActionsContext.ActionRecord");

                    b.Property<string>("MangaId")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("MangaId");

                    b.Property<string>("MetadataFetcher")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.HasDiscriminator().HasValue(6);
                });

            modelBuilder.Entity("API.Schema.ActionsContext.Actions.StartupActionRecord", b =>
                {
                    b.HasBaseType("API.Schema.ActionsContext.ActionRecord");

                    b.HasDiscriminator().HasValue(0);
                });
#pragma warning restore 612, 618
        }
    }
}
